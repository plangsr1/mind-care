// src/AdminConsultPage.jsx
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { useAuth } from './AuthContext.jsx';
import './AdminConsultPage.css'; // (‡πÉ‡∏ä‡πâ CSS ‡πÄ‡∏î‡∏¥‡∏°)

// State ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏° (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏•‡πâ‡∏≤‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°)
const initialFormState = {
  name: '',
  title: '',
  specialty: '',
  description: '',
  photoUrl: '',
  userId: '' // üí° ‡πÄ‡∏û‡∏¥‡πà‡∏° userId
};

function AdminConsultPage() {
  const [specialists, setSpecialists] = useState([]);
  const [appointments, setAppointments] = useState([]);
  const [availableDoctors, setAvailableDoctors] = useState([]); // üí° State ‡πÉ‡∏´‡∏°‡πà
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const { token } = useAuth();

  // State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏° Specialist
  const [formData, setFormData] = useState(initialFormState);
  const [editMode, setEditMode] = useState(false); // false = Add, true = Edit
  const [currentSpecId, setCurrentSpecId] = useState(null);

  // --- üí° Helper function ‡∏î‡∏∂‡∏á‡∏´‡∏°‡∏≠‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á ---
  const fetchAvailableDoctors = async () => {
    if (!token) return;
    try {
      const res = await axios.get('http://localhost:3001/api/users/doctors-available', {
        headers: { Authorization: `Bearer ${token}` }
      });
      setAvailableDoctors(res.data.data);
    } catch (err) {
      console.error("Failed to fetch available doctors", err);
    }
  };
  
  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà Admin ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ
  useEffect(() => {
    const fetchData = async () => {
      if (!token) return;
      setLoading(true);
      setError('');
      try {
        // 1. ‡∏î‡∏∂‡∏á‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏°‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Specialists)
        const specRes = await axios.get('http://localhost:3001/api/specialists');
        setSpecialists(specRes.data.data);

        // 2. ‡∏î‡∏∂‡∏á‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Appointments)
        const apptRes = await axios.get('http://localhost:3001/api/appointments/all', {
          headers: { Authorization: `Bearer ${token}` }
        });
        setAppointments(apptRes.data.data);

        // 3. ‡∏î‡∏∂‡∏á User (doctor) ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
        fetchAvailableDoctors();

      } catch (err) {
        setError("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ");
      } finally {
        setLoading(false);
      }
    };
    fetchData();
  }, [token]);


  // --- üí° ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ü‡∏≠‡∏£‡πå‡∏° (‡πÉ‡∏´‡∏°‡πà) ---
  const handleFormChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleCancelEdit = () => {
    setEditMode(false);
    setCurrentSpecId(null);
    setFormData(initialFormState);
    setError('');
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');

    const dataToSend = {
      ...formData,
      userId: formData.userId === '' ? null : parseInt(formData.userId)
    };

    try {
      if (editMode) {
        // --- Edit Mode (PUT) ---
        const res = await axios.put(`http://localhost:3001/api/specialists/${currentSpecId}`, dataToSend, {
          headers: { Authorization: `Bearer ${token}` }
        });
        setSpecialists(prev => prev.map(s => s.id === currentSpecId ? res.data.data : s));
      } else {
        // --- Add Mode (POST) ---
        const res = await axios.post('http://localhost:3001/api/specialists', dataToSend, {
          headers: { Authorization: `Bearer ${token}` }
        });
        setSpecialists(prev => [...prev, res.data.data]);
      }
      
      handleCancelEdit(); // ‡∏•‡πâ‡∏≤‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°
      fetchAvailableDoctors(); // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏≠‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
      
    } catch (err) {
      console.error("Error submitting form:", err);
      setError(err.response?.data?.error || "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å");
    }
  };

  // --- üí° ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏° Edit / Delete (‡πÉ‡∏´‡∏°‡πà) ---
  const handleEdit = (spec) => {
    setEditMode(true);
    setCurrentSpecId(spec.id);
    setFormData({
      name: spec.name,
      title: spec.title,
      specialty: spec.specialty || '',
      description: spec.description || '',
      photoUrl: spec.photoUrl || '',
      userId: spec.userId || '' // Set to empty string if null
    });
    window.scrollTo(0, 0); // ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏õ‡∏ö‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏≠‡∏¢‡∏π‡πà
  };

  const handleDelete = async (specId) => {
    if (window.confirm(`‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå ID: ${specId} ?`)) {
      try {
        await axios.delete(`http://localhost:3001/api/specialists/${specId}`, {
          headers: { Authorization: `Bearer ${token}` }
        });
        setSpecialists(prev => prev.filter(s => s.id !== specId));
        fetchAvailableDoctors(); // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏≠‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
      } catch (err) {
        console.error("Error deleting specialist:", err);
        setError(err.response?.data?.error || "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÑ‡∏î‡πâ");
      }
    }
  };

  // --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ (‡∏à‡∏≤‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß) ---
  const handleStatusChange = (appointmentId, newStatus) => {
    axios.put(
      `http://localhost:3001/api/appointments/${appointmentId}/status`,
      { status: newStatus },
      { headers: { Authorization: `Bearer ${token}` } }
    )
    .then(response => {
      setAppointments(prevAppointments => {
        if (!Array.isArray(prevAppointments)) return [];
        return prevAppointments.map(appt =>
          appt.id === appointmentId
            ? { ...appt, status: newStatus }
            : appt
        );
      });
    })
    .catch(err => {
      console.error("Error updating status:", err);
      setError("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏î‡πâ");
    });
  };

  if (loading) return <div>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</div>;
  if (error && !editMode) return <p className="error-message">{error}</p>; // ‡πÅ‡∏™‡∏î‡∏á error ‡∏´‡∏•‡∏±‡∏Å

  // --- üí° ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠ (JSX) ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î‡πÅ‡∏•‡πâ‡∏ß ---
  return (
    <div className="admin-page-container">
      <h2>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤</h2>
      {error && <p className="error-message">{error}</p>}

      {/* --- ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Specialist (‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î) --- */}
      <section className="admin-section form-section">
        <h3>{editMode ? '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç' : '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡πÉ‡∏´‡∏°‡πà'}</h3>
        <form onSubmit={handleSubmit} className="specialist-form">
          {/* ... (input fields ‡πÄ‡∏î‡∏¥‡∏°: name, title, specialty, description, photoUrl) ... */}
          <div className="input-group">
            <label>‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•:</label>
            <input type="text" name="name" value={formData.name} onChange={handleFormChange} required />
          </div>
          <div className="input-group">
            <label>‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á (‡πÄ‡∏ä‡πà‡∏ô ‡∏à‡∏¥‡∏ï‡πÅ‡∏û‡∏ó‡∏¢‡πå, ‡∏ô‡∏±‡∏Å‡∏à‡∏¥‡∏ï‡∏ö‡∏≥‡∏ö‡∏±‡∏î):</label>
            <input type="text" name="title" value={formData.title} onChange={handleFormChange} required />
          </div>
          <div className="input-group">
            <label>‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç (‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢ ,):</label>
            <input type="text" name="specialty" value={formData.specialty} onChange={handleFormChange} />
          </div>
          <div className="input-group">
            <label>‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå:</label>
            <textarea name="description" value={formData.description} onChange={handleFormChange} />
          </div>
          <div className="input-group">
            <label>‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (URL):</label>
            <input type="text" name="photoUrl" value={formData.photoUrl} onChange={handleFormChange} />
          </div>

          {/* --- üí° ‡∏ä‡πà‡∏≠‡∏á Dropdown ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° User --- */}
          <div className="input-group">
            <label>‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (Doctor):</label>
            <select name="userId" value={formData.userId} onChange={handleFormChange}>
              <option value="">-- ‡πÑ‡∏°‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á / ‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏ß‡πà‡∏≤‡∏á --</option>
              
              {/* 1. ‡πÅ‡∏™‡∏î‡∏á User (doctor) ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡∏ß‡πà‡∏≤‡∏á */}
              {availableDoctors.map(doc => (
                <option key={doc.id} value={doc.id}>{doc.username}</option>
              ))}
              
              {/* 2. ‡∏ñ‡πâ‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç, ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á User ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏≠‡∏¢‡∏π‡πà‡∏î‡πâ‡∏ß‡∏¢ */}
              {editMode && formData.userId && !availableDoctors.find(d => d.id === formData.userId) && (
                <option value={formData.userId}>
                  {specialists.find(s => s.id === currentSpecId)?.linkedUsername || `(‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö User ID: ${formData.userId})`}
                </option>
              )}
            </select>
            <small>
              *‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤ '‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå User ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô 'doctor' ‡∏Å‡πà‡∏≠‡∏ô*
            </small>
          </div>
          {/* --- ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ä‡πà‡∏≠‡∏á Dropdown --- */}

          <div className="form-actions">
            <button type="submit" className="submit-btn">{editMode ? '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç' : '‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå'}</button>
            {editMode && (
              <button type="button" className="cancel-btn" onClick={handleCancelEdit}>‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
            )}
          </div>
        </form>
      </section>

      {/* --- ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç (‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î) --- */}
      <section className="admin-section">
        <h3>‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</h3>
        <table className="admin-table specialists-table">
          <thead>
            <tr>
              <th>ID</th>
              <th>‡∏ä‡∏∑‡πà‡∏≠</th>
              <th>‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á</th>
              <th>‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á</th>
              <th>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th> {/* üí° ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡∏°‡πà */}
            </tr>
          </thead>
          <tbody>
            {specialists.map(spec => (
              <tr key={spec.id}>
                <td>{spec.id}</td>
                <td>{spec.name}</td>
                <td>{spec.title}</td>
                <td>
                  {spec.userId 
                    ? `(ID: ${spec.userId}) ${spec.linkedUsername || ''}` 
                    : <span style={{color: '#999'}}>- ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á -</span>}
                </td>
                <td>
                  {/* --- üí° ‡∏õ‡∏∏‡πà‡∏° Edit / Delete --- */}
                  <button className="edit-btn" onClick={() => handleEdit(spec)}>‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç</button>
                  <button className="delete-btn" onClick={() => handleDelete(spec.id)}>‡∏•‡∏ö</button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </section>

      {/* --- ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 3: ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢ (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) --- */}
      <section className="admin-section">
        <h3>‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</h3>
        <table className="admin-table appointments-table">
          <thead>
            <tr>
              <th>‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</th>
              <th>‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç</th>
              <th>‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Ç‡∏≠</th>
              <th>‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô</th>
              <th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
            </tr>
          </thead>
          <tbody>
            {appointments.map(appt => (
              <tr key={appt.id}>
                <td>{appt.userName}</td>
                <td>{appt.specialistName}</td>
                <td>{new Date(appt.requestedTime).toLocaleString()}</td>
                <td>{appt.reason || '-'}</td>
                <td>
                  <select
                    value={appt.status}
                    className={`status-select status-${appt.status}`}
                    onChange={(e) => handleStatusChange(appt.id, e.target.value)}
                  >
                    <option value="pending">‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô</option>
                    <option value="confirmed">‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß</option>
                    <option value="cancelled">‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</option>
                  </select>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </section>
    </div>
  );
}

export default AdminConsultPage;